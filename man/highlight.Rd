% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{highlight}
\alias{highlight}
\alias{initialise}
\title{Highlight & Initialise}
\usage{
highlight(
  el = NULL,
  title = NULL,
  description = NULL,
  side = NULL,
  align = NULL,
  show_buttons = c("close"),
  disable_buttons = NULL,
  done_btn_text = "Done",
  next_btn_text = "Next",
  prev_btn_text = "Previous",
  show_progress = FALSE,
  progress_text = NULL,
  popover_class = NULL,
  element = NULL,
  animate = TRUE,
  overlay_opacity = 0.75,
  stage_padding = 10,
  allow_close = TRUE,
  allow_keyboard_control = TRUE,
  overlay_color = "black",
  smooth_scroll = FALSE,
  stage_radius = 5,
  disable_active_interaction = FALSE,
  popover_offset = 10,
  on_popover_render = NULL,
  on_next_click = NULL,
  on_prev_click = NULL,
  on_close_click = NULL,
  on_deselected = NULL,
  on_highlighted = NULL,
  on_highlight_started = NULL,
  on_destroy_started = NULL,
  on_destroyed = NULL,
  mathjax = FALSE,
  el_as_is = FALSE,
  padding = NULL,
  position = NULL,
  stage_background = NULL,
  overlay_click_next = NULL,
  close_btn_text = NULL,
  opacity = NULL,
  show_btns = NULL,
  keyboard_control = NULL,
  class = NULL,
  ...,
  session = shiny::getDefaultReactiveDomain()
)

initialise(
  el = NULL,
  title = NULL,
  description = NULL,
  side = NULL,
  align = NULL,
  show_buttons = c("close"),
  disable_buttons = NULL,
  done_btn_text = "Done",
  next_btn_text = "Next",
  prev_btn_text = "Previous",
  show_progress = FALSE,
  progress_text = NULL,
  popover_class = NULL,
  element = NULL,
  animate = TRUE,
  overlay_opacity = 0.75,
  stage_padding = 10,
  allow_close = TRUE,
  allow_keyboard_control = TRUE,
  overlay_color = "black",
  smooth_scroll = FALSE,
  stage_radius = 5,
  disable_active_interaction = FALSE,
  popover_offset = 10,
  on_popover_render = NULL,
  on_next_click = NULL,
  on_prev_click = NULL,
  on_close_click = NULL,
  on_deselected = NULL,
  on_highlighted = NULL,
  on_highlight_started = NULL,
  on_destroy_started = NULL,
  on_destroyed = NULL,
  mathjax = FALSE,
  el_as_is = FALSE,
  padding = NULL,
  position = NULL,
  stage_background = NULL,
  overlay_click_next = NULL,
  close_btn_text = NULL,
  opacity = NULL,
  show_btns = NULL,
  keyboard_control = NULL,
  class = NULL,
  ...,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{el}{The CSS selector for the element to be highlighted. If not preceded by a \code{.} or \verb{#} the element will be assumed to be an id and \verb{#} will be prepended. Use \code{el_as_is = TRUE} to mute this behavior. Can also use \code{element}.}

\item{title}{Title shown in the popover. You can use HTML in this.}

\item{description}{Description shown in the popover. You can use HTML in this. Omit one of title or description to show only the other.}

\item{side}{The position of the popover relative to the target element. Possible values: "top", "right", "bottom", "left".}

\item{align}{The alignment of the popover relative to the target element. Possible values: "start", "center", "end".}

\item{show_buttons}{Array of buttons to show in the popover. Defaults to \link{"close"}.}

\item{disable_buttons}{Array of buttons to disable.}

\item{done_btn_text}{Text to show in the done button.}

\item{next_btn_text}{Text to show in the next button.}

\item{prev_btn_text}{Text to show in the previous button.}

\item{show_progress}{Whether to show the progress text in popover.}

\item{progress_text}{Template for the progress text.}

\item{popover_class}{Custom class to add to the popover element.}

\item{element}{The CSS selector for the element to be highlighted. Can also use \code{el}.}

\item{animate}{Whether to animate the product tour. (default: true)}

\item{overlay_opacity}{Opacity of the backdrop. (default: 0.75)}

\item{stage_padding}{Distance between the highlighted element and the cutout. (default: 10)}

\item{allow_close}{Whether to allow closing the popover by clicking on the backdrop. (default: true)}

\item{allow_keyboard_control}{Whether to allow keyboard navigation. (default: true)}

\item{overlay_color}{Overlay color. (default: "black").}

\item{smooth_scroll}{Whether to smooth scroll to the highlighted element. (default: false)}

\item{stage_radius}{Radius of the cutout around the highlighted element. (default: 5)}

\item{disable_active_interaction}{Whether to disable interaction with the highlighted element. (default: false)}

\item{popover_offset}{Distance between the popover and the highlighted element. (default: 10)}

\item{on_popover_render}{Hook to run after the popover is rendered.}

\item{on_next_click}{Callback for next button click.}

\item{on_prev_click}{Callback for previous button click.}

\item{on_close_click}{Callback for close button click.}

\item{on_deselected}{Callback for when the current step is deselected.}

\item{on_highlighted}{A JavaScript function to run when the step is highlighted.}

\item{on_highlight_started}{A JavaScript function body to run when the step is just about to be highlighted.}

\item{on_destroy_started}{Hooks to run before destroying the driver. Each hook receives the following parameters: element: Currently active element, step: The step object configured for the currently active, options.config: The current configuration options, options.state: The current state of the driver}

\item{on_destroyed}{Hooks to run after destroying the driver. Each hook receives the following parameters: element: Currently active element, step: The step object configured for the currently active, options.config: The current configuration options, options.state: The current state of the driver}

\item{mathjax}{Whether to use MathJax in the steps.}

\item{el_as_is}{\code{lgl} Whether the element should be treated as-is. IE elements without a \code{.} or \verb{#} in the first position will be treated as-is.}

\item{padding}{\strong{Deprecated} See \code{stage_padding}}

\item{position}{Where to position the popover.
See positions section.}

\item{stage_background}{\strong{Deprecated} See \code{overlay_color}}

\item{overlay_click_next}{\strong{Deprecated}}

\item{close_btn_text}{\strong{Deprecated} 'Close' button is now an icon}

\item{opacity}{\strong{Deprecated} See \code{overlay_opacity}}

\item{show_btns}{\strong{Deprecated} See \code{show_buttons}}

\item{keyboard_control}{\strong{Deprecated} See \code{allow_keyboard_control}}

\item{class}{\strong{Deprecated} See \code{popover_class}.}

\item{...}{Other options to pass to the driver.js initialisation. Reserved for future use.}

\item{session}{A valid Shiny session if \code{NULL}
the function attempts to get the session with
\code{\link[shiny:domains]{shiny::getDefaultReactiveDomain()}}.}
}
\description{
Initialise and highlight an element.
}
\section{Callbacks}{

All arguments beginning with \code{on...} allow for the declaration of a Javascript callback function body.
The function body can use the following parameters:
\itemize{
\item element: The current DOM element of the step
\item step: The step object configured for the step
\item options.config: The current configuration options
\item options.state: The current state of the driver
\item id: the id of the driver
\item this.get_driver(id): returns the driver object for calling API methods on the driver itself.
The callback needs only the function body, and not the leading arguments or brackets. IE the arrow function syntax represented below is unnecessary and will break the callback:
}

\if{html}{\out{<div class="sourceCode js">}}\preformatted{(args) => \{
  //JS Code here
\}
}\if{html}{\out{</div>}}

instead supply just the code!
}

